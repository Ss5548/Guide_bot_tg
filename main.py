import webbrowser
import telebot
import requests
import locale
import datetime
from telebot import types

# –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é city –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ–º –º–µ—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ get_weather –∏ get_places
# –∏ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏–∏

bot = telebot.TeleBot('7181902570:AAGkf7jrLqvhN-pJgvL6NGQr_vE3F1NYTg0')
API = 'dedd8faab24bf4b5adb455980850dc90'


state = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
attractions = {}


@bot.message_handler(commands=['start'])
def start(message):
    # –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —á–∞—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üèñü§ò')
    bot.send_message(message.chat.id, '–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')
    state[message.chat.id] = {'status': 'waiting_for_city'}


@bot.message_handler(func=lambda message: state.get(message.chat.id, {}).get('status') == 'waiting_for_city')
def get_attractions(message):
    city = message.text.strip().lower()
    state[message.chat.id]['city'] = city  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    url = f'https://ru.wikipedia.org/w/api.php?action=query&list=search&srsearch=–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏+–≤+{city}&format=json'
    response = requests.get(url)
    data = response.json()

    attractions[message.chat.id] = [(index + 1, item['title'], get_attraction_description(item['title'])) for
                                    index, item in enumerate(data['query']['search'])]

    send_attractions_in_parts(message.chat.id, attractions[message.chat.id])

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ")
    state[message.chat.id]['status'] = 'waiting_for_selection'


def get_attraction_description(attraction_title):
    url = f'https://ru.wikipedia.org/w/api.php?action=query&prop=extracts&exintro&explaintext&titles={attraction_title}&format=json'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        page = next(iter(data['query']['pages'].values()))
        return page.get('extract', '')
    return ''


def send_attractions_in_parts(chat_id, attractions_list):
    attractions_messages = []
    current_message = ""
    for attraction in attractions_list:
        message_line = f"{attraction[0]}. {attraction[1]}\n{attraction[2]}\n\n"
        if len(current_message) + len(message_line) > 4096:
            attractions_messages.append(current_message)
            current_message = message_line
        else:
            current_message += message_line

    if current_message:
        attractions_messages.append(current_message)

    for msg in attractions_messages:
        bot.send_message(chat_id, msg)

def send_attraction_details(chat_id, title):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    url = f'https://ru.wikipedia.org/w/api.php?action=query&prop=extracts&exintro&explaintext&titles={title}&format=json'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        page = next(iter(data['query']['pages'].values()))
        extract = page.get('extract', '')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤
        bot.send_message(chat_id, extract)
    else:
        bot.send_message(chat_id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')




@bot.message_handler(func=lambda message: state.get(message.chat.id, {}).get('status') == 'waiting_for_selection')
def handle_selection(message):
    try:
        selected_attraction = int(message.text)
        selected_title = attractions[message.chat.id][selected_attraction - 1][1]
        city = state[message.chat.id]['city']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã

        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_title}")
        send_attraction_details(message.chat.id, selected_title)
        send_weather_info(message.chat.id, city)

        state[message.chat.id]['status'] = 'default'


    except Exception as e:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
        state[message.chat.id]['status'] = 'waiting_for_selection'


def send_weather_info(chat_id, city):
    res = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API}&units=metric&lang=ru')
    if res.status_code == 200:
        data = res.json()
        forecast_message = f"–ü–æ–≥–æ–¥–∞ –≤ {city.capitalize()} –Ω–∞ 5 –¥–Ω–µ–π:\n"
        for item in data['list']:
            forecast_time = datetime.datetime.strptime(item['dt_txt'], '%Y-%m-%d %H:%M:%S')
            if forecast_time.hour == 12:  # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—É–¥–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                date = forecast_time.strftime('%Y-%m-%d')
                temperature = item['main']['temp']
                weather_description = item['weather'][0]['description']
                weather_emoji = get_weather_emoji(weather_description)
                forecast_message += f"{date}:  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C, {weather_description.capitalize()} {weather_emoji}\n\n"

        bot.send_message(chat_id, forecast_message)
    else:
        bot.send_message(chat_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.')


def get_weather_emoji(weather_description):
    if '–æ–±–ª–∞—á–Ω–æ' in weather_description:
        return '‚òÅÔ∏è'
    elif '–ø–∞—Å–º—É—Ä–Ω–æ' in weather_description:
        return '‚òÅÔ∏è'
    elif '—è—Å–Ω–æ' in weather_description:
        return '‚òÄÔ∏è'
    elif '–¥–æ–∂–¥—å' in weather_description:
        return 'üåßÔ∏è'
    elif '—Å–Ω–µ–≥' in weather_description:
        return 'üå®Ô∏è'
    elif '—Ç—É–º–∞–Ω' in weather_description:
        return 'üå´Ô∏è'
    else:
        return 'üåà'



bot.polling(none_stop=True)

