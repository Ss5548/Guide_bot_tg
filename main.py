import telebot
import requests
import datetime
from telebot import types

bot = telebot.TeleBot('7181902570:AAGkf7jrLqvhN-pJgvL6NGQr_vE3F1NYTg0')
API = 'dedd8faab24bf4b5adb455980850dc90'

state = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
attractions = {}


@bot.message_handler(commands=['start'])
def start(message):
    # –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —á–∞—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üèñ')
    bot.send_message(message.chat.id,
                     '–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å üòä\n–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ')
    state[message.chat.id] = {'status': 'waiting_for_city'}


def send_attractions_in_parts(chat_id, attractions_list):
    attractions_messages = []
    current_message = ""
    for attraction in attractions_list:
        message_line = f"{attraction[0]}. {attraction[1]}\n{attraction[2]}\n\n"
        if len(current_message) + len(message_line) > 4096:
            attractions_messages.append(current_message)
            current_message = message_line
        else:
            current_message += message_line

    if current_message:
        attractions_messages.append(current_message)

    for msg in attractions_messages:
        bot.send_message(chat_id, msg)


@bot.message_handler(func=lambda message: state.get(message.chat.id, {}).get('status') == 'waiting_for_city')
def get_attractions(message):
    city = message.text.strip().lower()
    if not city:
        bot.send_message(message.chat.id,
                         "–í—ã –≤–≤–µ–ª–∏ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑.")
        return

    state[message.chat.id]['city'] = city  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    url = f'https://ru.wikipedia.org/w/api.php?action=query&list=search&srsearch=–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏+–≤+{city}&format=json'
    response = requests.get(url)
    data = response.json()

    search_results = data['query']['search']
    if not search_results:
        bot.send_message(message.chat.id,
                         f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –≤ –≥–æ—Ä–æ–¥–µ {city}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.")
        return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        attraction_keywords = ['city']
        filtered_results = []
        for item in search_results:
            title = item['title'].lower()
            if any(keyword in title for keyword in attraction_keywords):
                filtered_results.append(item)
            elif city not in title or (city in title and len(title.split()) > 1):
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≥–¥–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞
                filtered_results.append(item)

        if not filtered_results:
            bot.send_message(message.chat.id,
                             f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –≤ –≥–æ—Ä–æ–¥–µ {city}.")
            return

    attractions[message.chat.id] = [(index + 1, item['title'], get_attraction_description(item['title'])) for
                                    index, item in enumerate(search_results)]

    send_attractions_in_parts(message.chat.id, attractions[message.chat.id])

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–æ–ª—å—à–µ –ø—Ä–∏–≥–ª—è–Ω—É–ª—Å—è: ")
    state[message.chat.id]['status'] = 'waiting_for_selection'


def get_attraction_description(attraction_title):
    url = f'https://ru.wikipedia.org/w/api.php?action=query&prop=extracts&exintro&explaintext&titles={attraction_title}&format=json'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        page = next(iter(data['query']['pages'].values()))
        extract = page.get('extract', '')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if '–∏—Å—Ç–æ—Ä–∏—è' in extract.lower() or '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞' in extract.lower() or '–æ–ø–∏—Å–∞–Ω–∏–µ' in extract.lower():
            # --------------------------------------------------------------
            # –í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            # --------------------------------------------------------------
            pass

        return extract
    return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'


def send_attraction_details(chat_id, title):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    url = f'https://ru.wikipedia.org/w/api.php?action=query&prop=extracts&exintro&explaintext&titles={title}&format=json'
    response = requests.get(url)
    bot.send_message(chat_id, "–í–∞—à –≤—ã–±–æ—Ä:")
    if response.status_code == 200:
        data = response.json()
        page = next(iter(data['query']['pages'].values()))
        extract = page.get('extract', '')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤
        bot.send_message(chat_id, extract)
    else:
        bot.send_message(chat_id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')


@bot.message_handler(func=lambda message: state.get(message.chat.id, {}).get('status') == 'waiting_for_selection')
def handle_selection(message):
    try:
        selected_attraction = int(message.text)
        selected_title = attractions[message.chat.id][selected_attraction - 1][1]
        city = state[message.chat.id]['city']
        send_attraction_details(message.chat.id, selected_title)
        send_weather_info(message.chat.id, city)
        state[message.chat.id]['status'] = 'waiting_for_next_action'
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
        state[message.chat.id]['status'] = 'waiting_for_selection'
    except IndexError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
        state[message.chat.id]['status'] = 'waiting_for_selection'


def send_weather_info(chat_id, city):
    res = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API}&units=metric&lang=ru')
    if res.status_code == 200:
        data = res.json()
        forecast_message = f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city.capitalize()} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π:\n"
        for item in data['list']:
            forecast_time = datetime.datetime.strptime(item['dt_txt'], '%Y-%m-%d %H:%M:%S')
            if forecast_time.hour == 12:  # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—É–¥–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                date = forecast_time.strftime('%Y-%m-%d')
                temperature = item['main']['temp']
                weather_description = item['weather'][0]['description']
                weather_emoji = get_weather_emoji(weather_description)
                forecast_message += f"{date}:  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C, {weather_description.capitalize()} {weather_emoji}\n\n"

        bot.send_message(chat_id, forecast_message)

        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ, –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('üè¨ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', '‚úàÔ∏è –ö—É–ø–∏—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã')
        bot.send_message(chat_id, '–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –∫—É–ø–∏—Ç—å –∞–≤–∞–∏–∞–±–∏–ª–µ—Ç –∏–ª–∏ –∂–µ —É–∑–Ω–∞—Ç—å –µ—â—ë –æ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö?',
                         reply_markup=markup)
    else:
        bot.send_message(chat_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.')


def get_weather_emoji(weather_description):
    if '–æ–±–ª–∞—á–Ω–æ' in weather_description:
        return '‚òÅÔ∏è'
    elif '–ø–∞—Å–º—É—Ä–Ω–æ' in weather_description:
        return '‚òÅÔ∏è'
    elif '—è—Å–Ω–æ' in weather_description:
        return '‚òÄÔ∏è'
    elif '–¥–æ–∂–¥—å' in weather_description:
        return 'üåßÔ∏è'
    elif '—Å–Ω–µ–≥' in weather_description:
        return 'üå®Ô∏è'
    elif '—Ç—É–º–∞–Ω' in weather_description:
        return 'üå´Ô∏è'
    else:
        return 'üåà'


@bot.message_handler(func=lambda message: state.get(message.chat.id, {}).get('status') == 'waiting_for_next_action')
def handle_action(message):
    action = message.text.strip().lower()
    if '–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' in action:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å:')
        state[message.chat.id]['status'] = 'waiting_for_city'
    elif '–∫—É–ø–∏—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã' in action:
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤.',
                         reply_markup=types.InlineKeyboardMarkup().add(
                             types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã', url='https://www.aviasales.ru/')))
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        start(message)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫


bot.polling(none_stop=True)
